import "../common.step"

function parseNumbers = (string part) {
	list nums = []

	foreach (string s1 in split(part, "  ")) {
		foreach (string s2 in split(s1, " ")) {
			if (s2 != "") {
				doAdd(nums, toNumber(s2))
			}
		}
	}

	return nums
}

function parseCard = (string line) {
	map card = {"name": "", "luckyNumbers": [], "ownNumbers": [], "count": 1}

	list nameContent = split(line, ": ")
	card["name"] = nameContent[0]

	list numberParts = split(nameContent[1], " | ")
	card["luckyNumbers"] = parseNumbers(numberParts[0])
	card["ownNumbers"] = parseNumbers(numberParts[1])

	return card
}

function getNumCopies = (map card) {
	if (containsKey(card, "copiesWon")) {
		return card["copiesWon"]
	}

	list luckyNumbers = card["luckyNumbers"]
	list ownNumbers = card["ownNumbers"]

	number copiesWon = 0
	foreach (number ownNumber in ownNumbers) {
		if (contains(luckyNumbers, ownNumber)) {
			copiesWon += 1
		}
	}

	card["copiesWon"] = copiesWon

	return copiesWon
}

function processCopies = (list stack, list originalCards) {
	list copies = []

	foreach (map card in stack) {
		number copiesWon = getNumCopies(card)

		if (copiesWon > 0) {
			number startIdx = indexOf(originalCards, card) + 1
			number endIdx = startIdx + copiesWon - 1

//			println(card["name"], " won; adding ", copiesWon, " cards (", originalCards[startIdx]["name"], " to ", originalCards[endIdx]["name"], ")")

			number cardIdx = startIdx
			while (cardIdx <= endIdx) {
				map copy = originalCards[cardIdx]
				copy["count"] = copy["count"] + 1 // fixme: index access doesn't allow increment
				doAdd(copies, copy)
				cardIdx += 1
			}
		}
	}

	println("Processed ", length(stack), " cards; ", length(copies), " copies won")

	return copies
}

function printCounts = (bool a = true) { // fixme: can't have empty function signature??
	println(converted(originalCards, (map c) { return [c["name"],c["count"]] }))
}

function calculateSumCounts = (bool a = true) {
	number sumCounts = 0
	foreach (map card in originalCards) {
		sumCounts += card["count"]
	}
	return sumCounts
}

list originalCards = []
println("processing input")
list inputLines = readInputLines("4/input.txt")
foreach (string line in inputLines) {
	doAdd(originalCards, parseCard(line))
}

println(originalCards)

list stack = originalCards
while (length(stack) > 0) {
	list copies = processCopies(stack, originalCards)

	stack = copies
}

printCounts()

println("Sum of counts: ", calculateSumCounts())
