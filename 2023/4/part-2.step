import "../common.step"

function parseNumbers = (string part) {
	list nums = []

	foreach (string s1 in split(part, "  ")) {
		foreach (string s2 in split(s1, " ")) {
			if (s2 != "") {
				doAdd(nums, toNumber(s2))
			}
		}
	}

	return nums
}

function parseCard = (string line) {
	map card = {"name": "", "number": 0, "luckyNumbers": [], "ownNumbers": [], "count": 1}

	list nameContent = split(line, ": ")
	card["name"] = nameContent[0]
	list nameNumber = split(nameContent[0], " ")
	card["number"] = toNumber(nameNumber[1])

	list numberParts = split(nameContent[1], " | ")
	card["luckyNumbers"] = parseNumbers(numberParts[0])
	card["ownNumbers"] = parseNumbers(numberParts[1])

	return card
}

function getNumCopies = (map card) {
	list luckyNumbers = card["luckyNumbers"]
	list ownNumbers = card["ownNumbers"]

	number copiesWon = 0
	foreach (number ownNumber in ownNumbers) {
		if (contains(luckyNumbers, ownNumber)) {
			copiesWon += 1
		}
	}

	return copiesWon
}

function processCopies = (list stack, list originalCards) {
	list copies = []

	foreach (map card in stack) {
		number copiesWon = getNumCopies(card)

		if (copiesWon > 0) {
			number startIdx = indexOf(originalCards, card) + 1
			number endIdx = startIdx + copiesWon - 1

			//println("Card ", card["number"], " won; adding ", copiesWon, " cards (", originalCards[startIdx]["number"], " to ", originalCards[endIdx]["number"], ")")

			number cardIdx = startIdx
			while (cardIdx <= endIdx) {
				map copy = originalCards[cardIdx]
				copy["count"] = copy["count"] + 1
				doAdd(copies, copy)
				cardIdx += 1
			}
		}
	}

	//println("Processed ", length(stack), " cards; ", length(copies), " copies won")

	return copies
}

function printCounts = (bool a = true) { // fixme: can't have empty function signature??
	println(converted(originalCards, (map c) { return [c["name"],c["count"]] }))
}

list originalCards = []
list inputLines = readInputLines("4/input.txt")
foreach (string line in inputLines) {
	doAdd(originalCards, parseCard(line))
}

bool noMoreCopies = false
number totalCopies = 0
list stack = originalCards
while (!noMoreCopies) {
	list previousStack = stack
	list copies = processCopies(stack, originalCards)
	//println(converted(previousStack, (map c) { return c["number"] }), " -> ", converted(copies, (map c) { return c["number"] }))
	noMoreCopies = length(copies) == 0
	totalCopies += length(copies)

	stack = copies
}

printCounts()

number sumCounts = 0
foreach (map card in originalCards) {
	sumCounts += card["count"]
}

println("Sum of counts: ", sumCounts)
